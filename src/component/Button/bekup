// import { createServerFeature, createNode } from '@payloadcms/richtext-lexical'
// import { MyNode, $createMyNode, $isMyNode } from './EditorCustom'
// import { MyClientFeature } from './Custom.client'
// import type { ElementTransformer } from '@payloadcms/richtext-lexical/lexical/markdown'

// const MyMarkdownTransformer: ElementTransformer = {
//   type: 'element',
//   dependencies: [MyNode],
//   export: (node, exportChildren) => {
//     if (!$isMyNode(node)) {
//       return null
//     }
//     return '+++'
//   },
//   // match ---
//   regExp: /^\+\+\+\s*$/,
//   replace: (parentNode) => {
//     const node = $createMyNode()
//     if (node) {
//       parentNode.replace(node)
//     }
//   },
// }
// export const MyFeature = createServerFeature<
//   UnSanitizedProps,
//   SanitizedProps,
//   UnSanitizedClientProps
// >({
//   key: 'myFeature',
//   feature: async ({
//     config,
//     isRoot,
//     props,
//     resolvedFeatures,
//     unSanitizedEditorConfig,
//     featureProviderMap,
//   }) => {
//     const sanitizedProps = {
//       ...props,
//       // add server-side props here
//     }

//     return {
//       sanitizedServerFeatureProps: sanitizedProps,
//       feature: async ({
//         config,
//         isRoot,
//         props,
//         resolvedFeatures,
//         unSanitizedEditorConfig,
//         featureProviderMap,
//       }) => {
//         const sanitizedProps = console.log(props)
//         console.log(sanitizedProps)

//         return {
//           sanitizedServerFeatureProps: sanitizedProps,
//           markdownTransformers: [MyMarkdownTransformer],

//           ClientFeature: MyClientFeature,
//           nodes: [
//             // Use the createNode helper function to more easily create nodes with proper typing
//             createNode({
//               converters: {
//                 html: {
//                   converter: () => {
//                     return `<br/>`
//                   },
//                   nodeTypes: [MyNode.getType()],
//                 },
//               },
//               // Here you can add your actual node. On the server, they will be
//               // used to initialize a headless editor which can be used to perform
//               // operations on the editor, like markdown / html conversion.
//               node: MyNode,
//             }),
//           ],
//         }
//       },
//     }
//   },
// })
